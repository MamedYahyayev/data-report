- Create helper methods inside HtmlElement class to get other parameters of html element
e.g.

<a href="https://www.example.com"></a>
<div data-test="title"></div>

In above case, we might want to get href attribute or data-test attribute value. Provide a way to define them in API

--- Execute Tree Nodes in for loop
I've already correct this one in PaginationPageScraper, do the same in the others
---

--- Console Progress Bar

https://stackoverflow.com/questions/852665/command-line-progress-bar-in-java
https://medium.com/javarevisited/how-to-display-progressbar-on-the-standard-console-using-java-18f01d52b30e
https://github.com/ctongfei/progressbar

carriage return
---

--- InterventionNode

InterventionNotifier will implement from base notification interface.
It will take InterventionNode as parameter and will convert InterventionNode to
common form for notifications and user can see dedicated message on the console.

NotificationMessage {
    - id
    - title
    - message
    - description
    - type (HUMAN_INTERACTION_NEED, SCRAPING_FINISHED)
}

There will be some notifications that require input from humans so based on the input
it can publish an event to appropriate listeners based on NotificationType.

There might be multiple threads to give input. Here's the ideal scenario:

Let's say you've done what you have to do in each browser application, then on console, you
are going to see something like following

Notification: Thread-1 is waiting for your interaction
NotificationMessage [
    id: 1,
    title: Fill Login Form
    message: Please fill the form that requires username and password manually
    type: HUMAN_INTERACTION
]
Please, type one of these for next (1. Continue (c), 2. Wait (w), 3. Stop (s)): c

Thread-1 took your input, and continue its job.

Notification: Thread-2 is waiting for your interaction
NotificationMessage [
    id: 2,
    title: Fill Login Form
    message: Please fill the form that requires username and password manually
    type: HUMAN_INTERACTION
]
Please, type one of these for next (1. Continue (c), 2. Wait (w), 3. Stop (s), 4. Continue for all (ca)): c

Thread-2 took your input, and continue its job.

Continue for all option will publish an event for same type of notifications
In above case, let's say there are 5 other intervention node notification published,
then user did its job, and wants to continue for all, instead of one by one. In this
case, there might be other notifications, however, only continue for the same type of
notifications (in this case InterventionNotifier)

ConsoleInputDispatcher is responsible to send input results to each listener. Inside
each listener, they will get the result of operation, and do what they have to do.
In above case, InterventionNodeListener, might take InterventionNode as a reference
so whenever, it gets result, it will change its status to something else. Therefore, thread
safety is important here. Because listening process will happen in another thread.

Additional type names:
- InterventionNodeListener
- InterventionNotifier
- ConsoleInputDispatcher
- ConsoleInputPayload
- UserNotification
- NotificationType (enum)

ClientInputProcessor will take input from clients with validation of input, then will change status of
InterventionNodes from WAIT to FINISH. 

---


--- Verbose mode (Info mode)
It is recommended and might be useful for clients to turn on and off verbose mode.

if (verboseMode) {
    // Set logging level to DEBUG if verbose mode is enabled
    ch.qos.logback.classic.Logger rootLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
    rootLogger.setLevel(ch.qos.logback.classic.Level.DEBUG);
}

---


---
SafeWebElement can throw exceptions if user tell the entire template to throw exceptions

one way to define is, create another type SensibleWebElement that will throw every exception back to the
person other than NoSuchElementException

for instance, user can exclude exceptions for sensible web element if that exception happened ignore it,
if exception happens other than excluded one, then throw it and let the program stop.

Template Configurations
.silentOnExceptions(true) -> use SafeWebElement
.silentOnExceptions(false) -> use SensibleWebElement
.excludeExceptions() -> if empty then throw all exceptions if element is SensibleWebElement
.excludeExceptions(NoSuchElementException.class, StateStateException.class) -> ignore given ones, and throw others

Find a way to pass these configurations to internal classes to define the logic based on it.
---


- UI is blocking when a project is shared (1 or 2 seconds)

- Parallel scraping Feature:
    - Create a Task class which will be split and shared between clients. Each client is responsible for his own part.
    class Task:
        id: String
        name: String
        template: ScrapeTemplate
        assignee: Client
        status: TaskStatus (enum) (ASSIGNED, DRAFT, DELETED, CANCELLED, COMPLETED, UNCOMPLETED)
        description: The reason or explanation of the task status. e.g. Task #12 is cancelled because of
            internet connectivity or task #12 is finished successfully at 22.03.2024 13:34:45.
    Hint: in the future, the Task class can carry other parameters e.g. TaskDetails.

    - Splittable interface. The interface will be implemented by every template that can be split into multiple parts.
        Here's the blueprint of the Splittable interface:
     interface Splittable {
        List<Task> split(String taskName, Collection<Client> clients);
     }

    - Create a class which is responsible to share tasks between Clients. e.g. TaskManager
    class TaskManager
        The class will send receive list of tasks and iterate over them and send them to appropriate Clients. The class
        will log the details of each operation. For instance:
        Task #12 for 'turbo.az scraping' project sent to Mammad Yahyayev (mammadyahyayev@gmail.com or ip address)


- Kill application on 9090 port after terminating program (Research awaitTermination).

- Create a Web App for UI to manage all the tasks, configurations, clients connections and so on.
There will be listeners, notifications for clients to manage app better way. This way we can easily create UI by using
some of the powerful libraries in frontend.

- Make it possible for templates to be divided for only one client, in order to execute them with Threads internally.

- Add Human interaction Node where application will wait indefinitely until human clicking a button called Continue.
This is useful for websites that you want to populate passwords, some credentials or simplify process of scraping
(Example on Amazon, there was security concerns that you have to provide recaptcha). In these cases, notification
pop up will be appeared on Web App UI to tell the Client Human Interaction required...

- Problem: Either collecting data or exporting to CSV slipped column names and values

- Handle NoSuchElementException of Selenium differently. Because it prints huge exception message.

- Add tryCount or timeout for elements on UI maybe element will be loaded lately. TimeOut can be described as Node to
put it between other nodes.

- Add actions as Node, those will be executed in order. For instance scrape data, then click the dropdown menu button
in this case there will be Action node which accepts selectors, action object (mouse click, hover) and so on.

- Create Node flow that will be executed in order.

- Design Configuration file which is specific to AZScrape.

- [UPCOMING] Create an enum for shared flag arguments between clients and server.
Example:
FLAG_PROJECT(flag_short, flag_long)
FLAG_SERVER_PORT(flag_short, null)

- [UPCOMING] The Server has to check the existence of the given project, if the project doesn't exist, then it must
throw exception.

- [UPCOMING] Create a side panel for showing logs to the Coordinator client.
Example:
[22-04-2024T13:34:15] jack joined to 'hospital' project
[22-04-2024T13:44:28] jack-task#12 assigned to jack
[22-04-2024T13:56:32] jack completed jack-task#12 in 5:04 minutes


AZScrape Logo Ideas

Scrape keywords pulling AZ letters and those letters will be seen as distorted.

------------------------------------------------------------------------------------

--- [NEW PROJECT CONFIG FILE STRUCTURE]
project {
    properties {
        name: turboaz
        owner: mammadyahyayev
        createdAt: 26.08.2024
    }

    template<PAGINATION_TEMPLATE> {

    }

    template<MULTI_URL_TEMPLATE> {

    }
}

--- <!> Reason: we can define more than 1 template in the project, because template might collect URLs first
--- with PAGINATION_TEMPLATE, then use MULTI_URL_TEMPLATE to fetch data

When project owner click the button, then it will create default project file,
then owner can update project configs

TODO: Use VisitorPattern to read file content